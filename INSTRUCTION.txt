# SwapSphere - Инструкция по реализации

## 1. Структура проекта

Проект реализован согласно требованиям и имеет следующую структуру:

```
SwapSphere/
├── ads/                      # Основное приложение
│   ├── models.py            # Модели данных
│   ├── views.py             # Представления
│   ├── serializers.py       # Сериализаторы для API
│   ├── admin.py             # Настройки админ-панели
│   └── tests.py             # Модульные тесты
├── swapsphere/              # Основной проект
│   ├── settings.py          # Настройки проекта
│   └── urls.py              # Маршрутизация
├── docker-compose.yml       # Конфигурация Docker
├── Dockerfile               # Сборка Docker образа
└── requirements.txt         # Зависимости проекта

## 2. Реализация функциональных требований

### 2.1 Модели данных (ads/models.py)

#### Ad (Объявление):
- Поля:
  - user: ForeignKey к User (автор объявления)
  - title: CharField (заголовок)
  - description: TextField (описание)
  - image_url: URLField (опционально)
  - category: CharField (категория)
  - condition: CharField (состояние)
  - created_at: DateTimeField (auto_now_add)

#### ExchangeProposal (Предложение обмена):
- Поля:
  - ad_sender: ForeignKey к Ad (отправитель)
  - ad_receiver: ForeignKey к Ad (получатель)
  - comment: TextField
  - status: CharField (choices: pending/accepted/rejected)
  - created_at: DateTimeField (auto_now_add)

### 2.2 API Endpoints (ads/views.py)

#### Объявления (AdViewSet):
- GET /api/ads/ - список объявлений с фильтрацией и поиском
- POST /api/ads/ - создание объявления
- GET /api/ads/{id}/ - детали объявления
- PUT /api/ads/{id}/ - обновление объявления
- DELETE /api/ads/{id}/ - удаление объявления

Особенности:
- Поиск по title и description
- Фильтрация по category и condition
- Пагинация (10 элементов на страницу)
- Проверка авторства при редактировании/удалении

#### Предложения обмена (ExchangeProposalViewSet):
- GET /api/proposals/ - список предложений
- POST /api/proposals/ - создание предложения
- POST /api/proposals/{id}/accept/ - принятие предложения
- POST /api/proposals/{id}/reject/ - отклонение предложения

Особенности:
- Автоматическая установка статуса "pending"
- Фильтрация по отправителю/получателю
- Проверка прав при изменении статуса

### 2.3 Валидация и сериализация (ads/serializers.py)

#### AdSerializer:
- Валидация входных данных
- Автоматическое заполнение user и created_at
- Проверка обязательных полей

#### ExchangeProposalSerializer:
- Валидация входных данных
- Автоматическая установка статуса
- Проверка корректности объявлений

### 2.4 Тестирование (ads/tests.py)

Реализованы тесты для проверки:
- Создания объявлений
- Редактирования объявлений
- Удаления объявлений
- Создания предложений обмена
- Принятия/отклонения предложений

## 3. Запуск проекта

### 3.1 Локальная разработка:
```bash
python -m venv venv
.\venv\Scripts\Activate
pip install -r requirements.txt
python manage.py migrate
python manage.py runserver
```

### 3.2 Через Docker:
```bash
docker-compose up --build
```

## 4. Технические особенности

### 4.1 Безопасность:
- Аутентификация через Django REST Framework
- Проверка прав доступа для всех операций
- Валидация входных данных

### 4.2 Производительность:
- Пагинация для больших списков
- Оптимизированные запросы к БД
- Индексы на основных полях поиска

### 4.3 Масштабируемость:
- Готовность к Docker-развертыванию
- Поддержка PostgreSQL
- Модульная структура приложения

## 5. Дополнительные возможности

- Админ-панель Django для управления данными
- REST API документация
- Поддержка фильтрации и поиска
- Гибкая система статусов для предложений обмена

## 6. Тестирование

Для запуска тестов используйте:
```bash
python manage.py test
```

Проект покрыт тестами для всех ключевых функций:
- CRUD операции с объявлениями
- Работа с предложениями обмена
- Проверка прав доступа
- Валидация данных
