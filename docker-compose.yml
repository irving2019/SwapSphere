services:  # PostgreSQL база данных (обновлено)
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-swapsphere}
      POSTGRES_USER: ${POSTGRES_USER:-swapsphere}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-swapsphere123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-swapsphere} -d ${POSTGRES_DB:-swapsphere}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    shm_size: 128mb
  # Redis для кеширования (обновлено)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    # Добавлены лимиты ресурсов
    mem_limit: 300m
  # Django веб-приложение (обновлено)
  web:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    restart: unless-stopped
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-0}
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-change-me-in-production}
      - DATABASE_URL=${DATABASE_URL:-postgres://${POSTGRES_USER:-swapsphere}:${POSTGRES_PASSWORD:-swapsphere123}@db:5432/${POSTGRES_DB:-swapsphere}}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DJANGO_SETTINGS_MODULE=swapsphere.settings
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput --clear &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 60 --keep-alive 2 swapsphere.wsgi:application"
  # Nginx для статических файлов и прокси (обновлено)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ${SSL_CERT_PATH:-./ssl/dummy-cert}:/etc/ssl/certs/swapsphere.crt:ro
      - ${SSL_KEY_PATH:-./ssl/dummy-key}:/etc/ssl/private/swapsphere.key:ro
    depends_on:
      - web
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Именованные тома для персистентности данных
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local

# Сеть для связи между контейнерами
networks:
  app-network:
    driver: bridge
