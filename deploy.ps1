# üöÄ SwapSphere - –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è Windows
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ SwapSphere –ø—Ä–æ–µ–∫—Ç–∞

param(
    [string]$Mode = "menu"
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Global:Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Blue"
    Cyan = "Cyan"
    White = "White"
}

function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor $Global:Colors.Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor $Global:Colors.Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor $Global:Colors.Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor $Global:Colors.Red
}

function Test-SystemRequirements {
    Write-Status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    try {
        $pythonVersion = python --version 2>&1
        if ($pythonVersion -match "Python (\d+\.\d+\.\d+)") {
            Write-Success "Python $($matches[1]) –Ω–∞–π–¥–µ–Ω"
            $Global:PythonAvailable = $true
        }
    }
    catch {
        Write-Error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    try {
        pip --version | Out-Null
        Write-Success "pip –Ω–∞–π–¥–µ–Ω"
    }
    catch {
        Write-Error "pip –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    try {
        docker --version | Out-Null
        Write-Success "Docker –Ω–∞–π–¥–µ–Ω"
        $Global:DockerAvailable = $true
    }
    catch {
        Write-Warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
        $Global:DockerAvailable = $false
    }
}

function Initialize-VirtualEnvironment {
    Write-Status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if (-not (Test-Path "venv")) {
        python -m venv venv
        Write-Success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    }
    else {
        Write-Warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    }
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    & ".\venv\Scripts\Activate.ps1"
    Write-Success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    python -m pip install --upgrade pip
    Write-Success "pip –æ–±–Ω–æ–≤–ª–µ–Ω"
}

function Install-Dependencies {
    Write-Status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    pip install -r requirements.txt
    Write-Success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

function Initialize-Database {
    Write-Status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    python manage.py migrate
    Write-Success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $createSuperuser = Read-Host "–°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (y/n)"
    if ($createSuperuser -eq "y" -or $createSuperuser -eq "Y") {
        python manage.py createsuperuser
        Write-Success "–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω"
    }
}

function Invoke-CollectStatic {
    Write-Status "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
    
    python manage.py collectstatic --noinput
    Write-Success "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã"
}

function Invoke-Tests {
    Write-Status "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    $testResult = python test_full_autotest.py
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    }
    else {
        Write-Warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
    }
    return $LASTEXITCODE -eq 0
}

function Start-DevelopmentServer {
    Write-Status "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    
    Write-Success "SwapSphere –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
    Write-Status "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8000"
    Write-Status "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://127.0.0.1:8000/admin/"
    Write-Host ""
    Write-Host "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor $Global:Colors.Cyan
    
    python manage.py runserver
}

function Start-DockerDeployment {
    Write-Status "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker..."
    
    if ($Global:DockerAvailable) {
        Write-Host "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
        Write-Host "1) –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (docker-compose.dev.yml)"
        Write-Host "2) –ü—Ä–æ–¥–∞–∫—à–Ω (docker-compose.yml)"
        $dockerMode = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä"
        
        if ($dockerMode -eq "1") {
            docker-compose -f docker-compose.dev.yml up --build
        }
        else {
            docker-compose up --build
        }
    }
    else {
        Write-Error "Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    }
}

function Show-MainMenu {
    Write-Host ""
    Write-Host "üîÑ SwapSphere - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ" -ForegroundColor $Global:Colors.Cyan
    Write-Host "=============================================" -ForegroundColor $Global:Colors.Cyan
    Write-Host ""
    Write-Host "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    Write-Host "1) –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
    Write-Host "2) Docker (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)"
    Write-Host "3) Docker (–ø—Ä–æ–¥–∞–∫—à–Ω)"
    Write-Host "4) –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã"
    Write-Host "5) –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã)"
    
    $choice = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä"
    
    switch ($choice) {
        "1" {
            Test-SystemRequirements
            Initialize-VirtualEnvironment
            Install-Dependencies
            Initialize-Database
            Invoke-CollectStatic
            Invoke-Tests
            Start-DevelopmentServer
        }
        "2" {
            Test-SystemRequirements
            Start-DockerDeployment
        }
        "3" {
            Test-SystemRequirements
            Start-DockerDeployment
        }
        "4" {
            Test-SystemRequirements
            Initialize-VirtualEnvironment
            Install-Dependencies
            Invoke-Tests
        }
        "5" {
            Test-SystemRequirements
            Initialize-VirtualEnvironment
            Install-Dependencies
            Initialize-Database
            Invoke-CollectStatic
            Start-DevelopmentServer
        }
        default {
            Write-Error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
        }
    }
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    try {
        if ($Mode -eq "menu") {
            Show-MainMenu
        }
        elseif ($Mode -eq "test") {
            Test-SystemRequirements
            Initialize-VirtualEnvironment
            Install-Dependencies
            Invoke-Tests
        }
        elseif ($Mode -eq "dev") {
            Test-SystemRequirements
            Initialize-VirtualEnvironment
            Install-Dependencies
            Initialize-Database
            Invoke-CollectStatic
            Start-DevelopmentServer
        }
        else {
            Show-MainMenu
        }
    }
    catch {
        Write-Error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $_"
        exit 1
    }
}

# –ó–∞–ø—É—Å–∫
Main
