#!/usr/bin/env python
"""
üß™ –ü–û–õ–ù–´–ô –ê–í–¢–û–¢–ï–°–¢ SWAPSPHERE

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞–º–∏
–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
"""

import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'swapsphere.settings')

import django
django.setup()

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Django –º–æ–¥–µ–ª–∏
from django.test import TestCase
from django.contrib.auth.models import User
from django.urls import reverse
from django.core.files.uploadedfile import SimpleUploadedFile

try:
    from PIL import Image
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

import io

from ads.models import UserProfile, Ad, AdImage, ExchangeProposal


class SwapSphereFullTest:
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ SwapSphere"""
    
    def __init__(self):
        self.passed_tests = 0
        self.failed_tests = 0
        self.total_tests = 0
        
    def print_header(self, title):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞"""
        print(f"\n{'='*60}")
        print(f"üß™ {title}")
        print(f"{'='*60}")
        
    def print_test(self, test_name, status, details=""):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if status:
            self.passed_tests += 1
            print(f"‚úÖ {test_name}")
            if details:
                print(f"   {details}")
        else:
            self.failed_tests += 1
            print(f"‚ùå {test_name}")
            if details:
                print(f"   ‚ö†Ô∏è  {details}")
    
    def test_database_setup(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            users_count = User.objects.count()
            self.print_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
            categories_count = len(Ad.CATEGORY_CHOICES)
            self.print_test("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", True, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
            
            ads_count = Ad.objects.count()
            self.print_test("–ú–æ–¥–µ–ª—å Ad", True, f"–û–±—ä—è–≤–ª–µ–Ω–∏–π: {ads_count}")
            
            profiles_count = UserProfile.objects.count()
            self.print_test("–ú–æ–¥–µ–ª—å UserProfile", True, f"–ü—Ä–æ—Ñ–∏–ª–µ–π: {profiles_count}")
            
            return True
            
        except Exception as e:
            self.print_test("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", False, str(e))
            return False
    
    def test_user_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.print_header("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User.objects.filter(username='test_user').first()
            if not test_user:
                test_user = User.objects.create_user(
                    username='test_user',
                    email='test@example.com',
                    password='testpass123'
                )
            
            self.print_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True, f"ID: {test_user.id}")
              # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile, created = UserProfile.objects.get_or_create(
                user=test_user,
                defaults={'phone_number': '+7123456789'}
            )
            
            self.print_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", True, f"ID: {profile.id}")
            
            return test_user
            
        except Exception as e:
            self.print_test("–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", False, str(e))
            return None
    
    def test_categories(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.print_header("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ö–ê–¢–ï–ì–û–†–ò–ô")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = Ad.CATEGORY_CHOICES
            self.print_test("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, f"–î–æ—Å—Ç—É–ø–Ω–æ: {len(categories)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_keys = [choice[0] for choice in categories]
            
            expected_categories = ['smartphones', 'computers', 'books', 'clothing']
            for cat in expected_categories:
                if any(cat in key for key in category_keys):
                    self.print_test(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat}'", True)
                else:
                    self.print_test(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat}'", False, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            self.print_test("–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, str(e))
            return False
    
    def test_ads_system(self, test_user):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        self.print_header("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô")
        
        if not test_user:
            self.print_test("–°–∏—Å—Ç–µ–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", False, "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return None
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            test_ad = Ad.objects.filter(user=test_user).first()
            if not test_ad:
                test_ad = Ad.objects.create(
                    user=test_user,
                    title='–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                    description='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                    category='smartphones',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ CATEGORY_CHOICES
                    condition='new'
                )
            
            self.print_test("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", True, f"ID: {test_ad.id}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if PIL_AVAILABLE:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.new('RGB', (100, 100), color='red')
                image_io = io.BytesIO()
                image.save(image_io, format='JPEG')
                image_io.seek(0)
                
                test_image = SimpleUploadedFile(
                    name='test.jpg',
                    content=image_io.getvalue(),
                    content_type='image/jpeg'
                )                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                next_order = AdImage.objects.filter(ad=test_ad).count()
                
                ad_image = AdImage.objects.create(
                    ad=test_ad,
                    image_file=test_image,
                    order=next_order
                )
                
                self.print_test("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", True, f"ID: {ad_image.id}")
            else:
                self.print_test("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", False, "PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return test_ad
            
        except Exception as e:
            self.print_test("–°–∏—Å—Ç–µ–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", False, str(e))
            return None
    
    def test_exchange_system(self, test_ad):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±–º–µ–Ω–∞"""
        self.print_header("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–ú–ï–ù–ê")
        
        if not test_ad:
            self.print_test("–°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞", False, "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
            return False
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞
            user2 = User.objects.filter(username='test_user2').first()
            if not user2:
                user2 = User.objects.create_user(
                    username='test_user2',
                    email='test2@example.com',
                    password='testpass123'
                )
            
            ad2 = Ad.objects.filter(user=user2).first()
            if not ad2:
                ad2 = Ad.objects.create(
                    user=user2,
                    title='–í—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                    description='–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                    category='computers',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ CATEGORY_CHOICES
                    condition='used'
                )
            
            self.print_test("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", True)
              # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
            proposal = ExchangeProposal.objects.create(
                ad_sender=test_ad,
                ad_receiver=ad2,
                message='–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±–º–µ–Ω',
                status='pending'
            )
            self.print_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞", True, f"ID: {proposal.id}")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            proposal.status = 'accepted'
            proposal.save()
            self.print_test("–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", True)
            
            return True
            
        except Exception as e:
            self.print_test("–°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞", False, str(e))
            return False
    
    def test_search_and_filter(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.print_header("–¢–ï–°–¢ –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            smartphone_ads = Ad.objects.filter(category='smartphones')
            self.print_test("–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", True, f"–ù–∞–π–¥–µ–Ω–æ: {smartphone_ads.count()}")
            
            # –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
            new_ads = Ad.objects.filter(condition='new')
            self.print_test("–§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é", True, f"–ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {new_ads.count()}")
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            text_search = Ad.objects.filter(title__icontains='—Ç–µ—Å—Ç')
            self.print_test("–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", True, f"–ù–∞–π–¥–µ–Ω–æ: {text_search.count()}")
            
            return True
            
        except Exception as e:
            self.print_test("–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", False, str(e))
            return False
    
    def test_user_profile_features(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.print_header("–¢–ï–°–¢ –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            test_user = User.objects.filter(username='test_user').first()
            if not test_user:
                self.print_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", False, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            profile = UserProfile.objects.get_or_create(user=test_user)[0]
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile.location = '–ú–æ—Å–∫–≤–∞'
            profile.bio = '–¢–µ—Å—Ç–æ–≤–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è'
            profile.save()
            
            self.print_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", True)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_ads = Ad.objects.filter(user=test_user)
            self.print_test("–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_ads.count()}")
            
            return True
            
        except Exception as e:
            self.print_test("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, str(e))
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–í–¢–û–¢–ï–°–¢–ê SWAPSPHERE")
        print("=" * 60)
        
        # 1. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_ok = self.test_database_setup()
        
        # 2. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_user = self.test_user_system()
        
        # 3. –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_ok = self.test_categories()
        
        # 4. –¢–µ—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        test_ad = self.test_ads_system(test_user)
        
        # 5. –¢–µ—Å—Ç –æ–±–º–µ–Ω–∞
        exchange_ok = self.test_exchange_system(test_ad)
        
        # 6. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        search_ok = self.test_search_and_filter()
        
        # 7. –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_ok = self.test_user_profile_features()
        
        # –ò—Ç–æ–≥–∏
        self.print_results()
    
    def print_results(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.failed_tests}")
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        
        if self.failed_tests == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("SwapSphere –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üöÄ")
        else:
            success_rate = (self.passed_tests / self.total_tests) * 100
            print(f"\n‚ö†Ô∏è  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            if success_rate >= 80:
                print("–°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ")
            elif success_rate >= 60:
                print("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ ‚ö†Ô∏è")
            else:
                print("–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ‚ùå")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–µ—Å—Ç–µ—Ä–∞
        tester = SwapSphereFullTest()
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tester.run_all_tests()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
